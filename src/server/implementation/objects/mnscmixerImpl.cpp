/* Autogenerated with kurento-module-creator */

#include <gst/gst.h>
#include "MediaPipeline.hpp"
#include <mnscmixerImplFactory.hpp>
#include "mnscmixerImpl.hpp"
#include <jsonrpc/JsonSerializer.hpp>
#include <KurentoException.hpp>

#define GST_CAT_DEFAULT kurento_mnscmixer_impl
GST_DEBUG_CATEGORY_STATIC (GST_CAT_DEFAULT);
#define GST_DEFAULT_NAME "KurentomnscmixerImpl"

namespace kurento
{
  namespace module
  {
    namespace mnscmixer
    {

      mnscmixerImpl::mnscmixerImpl (const boost::property_tree::ptree &config, std::shared_ptr<MediaPipeline> mediaPipeline)
        : HubImpl (config, std::dynamic_pointer_cast<MediaObjectImpl> (mediaPipeline), "mnscmixer"){
      }

      void mnscmixerImpl::focus(int sink_id, int param){
        bool connected;
        g_signal_emit_by_name (G_OBJECT (element), "focus", sink_id, param, &connected);
        if (!connected) {
          throw KurentoException (CONNECT_ERROR, "Can not focus port");
        }
      }
      MediaObjectImpl * mnscmixerImplFactory::createObject (const boost::property_tree::ptree &config, std::shared_ptr<MediaPipeline> mediaPipeline) const
      {
        return new mnscmixerImpl (config, mediaPipeline);
      }

      mnscmixerImpl::StaticConstructor mnscmixerImpl::staticConstructor;

      mnscmixerImpl::StaticConstructor::StaticConstructor()
      {
        GST_DEBUG_CATEGORY_INIT (GST_CAT_DEFAULT, GST_DEFAULT_NAME, 0,
                                 GST_DEFAULT_NAME);
      }

    } /* mnscmixer */
  } /* module */
} /* kurento */
